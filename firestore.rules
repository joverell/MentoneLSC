rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role from the user's auth token
    function isAdmin() {
      return request.auth.token.roles.hasAny(['Admin']);
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users:
    // - Anyone authenticated can read user profiles.
    // - A user can only create or update their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update: if isOwner(userId);
      // Deleting users should be handled via the Firebase Admin SDK for safety
      allow delete: if false;
    }

    // News:
    // - Anyone can read news.
    // - Only Admins can write (create, update, delete) news.
    match /news/{newsId} {
      allow read: if true;
      allow write: if isAdmin();

      // Comments sub-collection for news articles
      // - Anyone can read comments.
      // - Any authenticated user can create a comment.
      // - No one can update or delete comments from the client.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
    }

    // Events:
    // - Anyone can read events.
    // - Authenticated users can create events.
    // - Only the event creator or an Admin can update/delete it.
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.created_by) || isAdmin();

      // RSVPs Sub-collection:
      // - Any authenticated user can see who is RSVP'd.
      // - A user can only create/update their own RSVP.
      match /rsvps/{userId} {
        allow read: if request.auth != null;
        allow write: if isOwner(userId);
      }
    }

    // Roles and Access Groups:
    // - Authenticated users can read the list of roles/groups.
    // - Only Admins can write them.
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /access_groups/{groupId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Chat Messages:
    // To read or write, the user must be a member of the group,
    // OR the group must be the 'general' group (which is public to all authenticated users).
    match /chats/{groupId}/messages/{messageId} {
      allow read, create: if (
        (groupId == 'general' && request.auth != null) ||
        (groupId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupIds)
      );

      // Users should not be able to update or delete messages from the client
      allow update, delete: if false;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
