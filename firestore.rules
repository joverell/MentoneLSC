rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role from the user's auth token
    function isAdmin() {
      return request.auth.token.roles.hasAny(['Admin']);
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users:
    // - Anyone authenticated can read user profiles.
    // - A user can create or update their own profile.
    // - Admins can update any user's profile (e.g., to manage group memberships).
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      // Deleting users should be handled via the Firebase Admin SDK for safety
      allow delete: if false;
    }

    // News:
    // - Anyone can read news.
    // - Only Admins can write (create, update, delete) news.
    match /news/{newsId} {
      allow read: if true;
      allow write: if isAdmin();

      // Comments sub-collection for news articles
      // - Anyone can read comments.
      // - Any authenticated user can create a comment.
      // - No one can update or delete comments from the client.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if false;
      }
    }

    // Events:
    // - Anyone can read events.
    // - Authenticated users can create events.
    // - Only the event creator or an Admin can update/delete it.
    match /events/{eventId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.created_by) || isAdmin();

      // RSVPs Sub-collection:
      // - Any authenticated user can see who is RSVP'd.
      // - A user can only create/update their own RSVP.
      match /rsvps/{userId} {
        allow read: if request.auth != null;
        allow write: if isOwner(userId);
      }
    }

    // Roles and Access Groups:
    // - Authenticated users can read the list of roles/groups.
    // - Only Admins can write them.
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /access_groups/{groupId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // Helper function to check if a user is a member of a group by checking their user document
    function isGroupMember(groupId) {
      // Use .get() with a default empty list to prevent errors if 'groupIds' is missing
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc != null &&
             userDoc.data.get('groupIds', []).hasAny([groupId]);
    }

    // Chat documents
    match /chats/{chatId} {
      allow create: if request.auth != null;
      allow read: if canReadChat(chatId);
      allow update: if isOwner(resource.data.createdBy);

      // Messages sub-collection
      match /messages/{messageId} {
        allow create: if canReadChat(chatId);
        allow read: if canReadChat(chatId);
        allow update, delete: if false; // Users should not be able to update or delete messages
      }
    }

    function canReadChat(chatId) {
      // Document must exist to be read.
      if (!exists(/databases/$(database)/documents/chats/$(chatId))) {
        return false;
      }

      let chat = get(/databases/$(database)/documents/chats/$(chatId)).data;
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));

      // Public chats are readable by anyone.
      if (chat.type == 'public') {
        return true;
      }

      // Private chats are readable only by members.
      if (chat.type == 'private') {
        return request.auth.uid in chat.get('members', {});
      }

      // Restricted chats are readable by users in the chat's access groups.
      if (chat.type == 'restricted') {
        return userDoc != null &&
               userDoc.data.get('groupIds', []).hasAny(chat.get('groups', []));
      }

      // Deny by default if chat type is unknown.
      return false;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
